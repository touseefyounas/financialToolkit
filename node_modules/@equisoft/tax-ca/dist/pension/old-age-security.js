"use strict";
/*
Sources
    https://www.canada.ca/en/services/benefits/publicpensions/cpp/old-age-security/benefit-amount.html
    https://www.canada.ca/en/services/benefits/publicpensions/cpp/old-age-security/recovery-tax.html
    https://www.canada.ca/en/services/benefits/publicpensions/cpp/old-age-security/eligibility.html (delay bonus)
    https://www.canada.ca/en/services/benefits/publicpensions/cpp/old-age-security/payments.html

Revised
    2024-10-07
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.OAS = void 0;
const date_1 = require("../utils/date");
const math_1 = require("../utils/math");
exports.OAS = {
    getMinRequestDateFactor(birthDate, requestDate) {
        const minRequestDate = (0, date_1.addYearsToDate)(birthDate, this.MIN_AGE);
        const maxRequestDate = (0, date_1.addYearsToDate)(birthDate, this.MAX_AGE);
        const monthsToToday = (0, date_1.getMonthsDiff)(birthDate, (0, date_1.now)());
        const monthsToLastBirthDay = monthsToToday - (monthsToToday % 12);
        const monthsToMinRequestDate = (0, date_1.getMonthsDiff)(birthDate, minRequestDate);
        const monthsToMaxRequestDate = (0, date_1.getMonthsDiff)(birthDate, maxRequestDate);
        const monthsToRequestDate = (0, date_1.getMonthsDiff)(birthDate, requestDate);
        const receivingOASPayment = monthsToRequestDate >= monthsToMinRequestDate && monthsToRequestDate
            <= monthsToMaxRequestDate && monthsToRequestDate <= monthsToToday;
        if (monthsToLastBirthDay < monthsToMinRequestDate || monthsToLastBirthDay > monthsToMaxRequestDate
            || receivingOASPayment) {
            return 1;
        }
        const monthsDelta = monthsToLastBirthDay - monthsToMinRequestDate;
        return 1 + (monthsDelta * this.MONTHLY_DELAY_BONUS);
    },
    getRequestDateFactor(birthDate, requestDate) {
        const minRequestDate = (0, date_1.addYearsToDate)(birthDate, this.MIN_AGE);
        const maxRequestDate = (0, date_1.addYearsToDate)(birthDate, this.MAX_AGE);
        const monthsToToday = (0, date_1.getMonthsDiff)(birthDate, (0, date_1.now)());
        const monthsToLastBirthDay = monthsToToday - (monthsToToday % 12);
        const monthsToMinRequestDate = (0, date_1.getMonthsDiff)(birthDate, minRequestDate);
        const monthsToMaxRequestDate = (0, date_1.getMonthsDiff)(birthDate, maxRequestDate);
        const monthsToRequestDate = (0, date_1.getMonthsDiff)(birthDate, requestDate);
        const clampedMonthsToRequestDate = (0, math_1.clamp)(monthsToRequestDate, monthsToMinRequestDate, monthsToMaxRequestDate);
        const deltaMonthsFromMinRequestDate = clampedMonthsToRequestDate - monthsToMinRequestDate;
        const receivingOASPayment = monthsToRequestDate >= monthsToMinRequestDate && monthsToRequestDate
            <= monthsToMaxRequestDate && monthsToRequestDate <= monthsToToday;
        if (monthsToLastBirthDay > monthsToMaxRequestDate || receivingOASPayment) {
            return 1;
        }
        if (monthsToRequestDate < monthsToMinRequestDate) {
            return 0;
        }
        return 1 + (deltaMonthsFromMinRequestDate * this.MONTHLY_DELAY_BONUS);
    },
    getRepaymentMax(startOfYearAge) {
        return startOfYearAge >= exports.OAS.INCREASE.AGE - 1 ? exports.OAS.INCREASE.REPAYMENT_MAX : exports.OAS.REPAYMENT.MAX;
    },
    MAX_AGE: 70,
    MIN_AGE: 65,
    INCREASE: {
        AGE: 75,
        RATE: 0.1,
        REPAYMENT_MAX: 153771,
    },
    MONTHLY_PAYMENT_MAX: 727.67,
    MONTHLY_DELAY_BONUS: 0.006,
    REPAYMENT: {
        MAX: 148065,
        MIN: 90997,
        RATIO: 0.15,
    },
};
